// ============================================
// USER MODEL - PRIVACY-FOCUSED USER SCHEMA
// ============================================
// This defines the structure for user data in MongoDB
// Key Features: Secure password hashing, social features, privacy controls

const mongoose = require('mongoose');  // MongoDB object modeling
const bcrypt = require('bcryptjs');   // Password hashing library

// Define the user schema with validation and security
const userSchema = new mongoose.Schema({
  // ============================================
  // CORE USER AUTHENTICATION FIELDS
  // ============================================
  email: {
    type: String,
    required: [true, 'Email is required'],
    unique: true,           // Ensure email uniqueness in database
    lowercase: true,        // Convert to lowercase for consistency
    trim: true,            // Remove whitespace
    match: [/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/, 'Please enter a valid email']
  },
  password: {
    type: String,
    required: [true, 'Password is required'],
    minlength: [6, 'Password must be at least 6 characters long']
    // Note: Password will be hashed before saving (see pre-save middleware)
  },
  username: {
    type: String,
    required: [true, 'Username is required'],
    unique: true,          // Ensure username uniqueness
    trim: true,
    minlength: [3, 'Username must be at least 3 characters long'],
    maxlength: [30, 'Username cannot exceed 30 characters'],
    match: [/^[a-zA-Z0-9_]+$/, 'Username can only contain letters, numbers, and underscores']
  },
  
  // ============================================
  // OPTIONAL PROFILE INFORMATION
  // ============================================
  fullName: {
    type: String,
    trim: true,
    maxlength: [100, 'Full name cannot exceed 100 characters']
  },
  avatar: {
    type: String,
    default: null         // URL to profile picture (optional)
  },
  isEmailVerified: {
    type: Boolean,
    default: false        // Email verification status
  },
  
  // ============================================
  // USER PREFERENCES - PRIVACY CONTROLS
  // ============================================
  preferences: {
    summarizeOnSave: {
      type: Boolean,
      default: true       // Auto-summarize content when saved
    },
    summaryLength: {
      type: String,
      enum: ['short', 'medium', 'long'],  // Predefined summary lengths
      default: 'medium'
    },
    publicProfile: {
      type: Boolean,
      default: false      // Profile visibility (privacy-first default)
    }
  },
  
  // ============================================
  // SOCIAL FEATURES - FOLLOW SYSTEM
  // ============================================
  // Users who follow this user
  followers: [{
    user: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User'         // Reference to User model
    },
    followedAt: {
      type: Date,
      default: Date.now   // Timestamp when follow relationship was created
    }
  }],
  
  // Users this user is following
  following: [{
    user: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User'         // Reference to User model
    },
    followedAt: {
      type: Date,
      default: Date.now   // Timestamp when follow relationship was created
    }
  }],
  
  // Pending follow requests (privacy feature)
  followRequests: [{
    from: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User'         // User who sent the follow request
    },
    requestedAt: {
      type: Date,
      default: Date.now   // When the request was sent
    }
  }],
  
  // ============================================
  // USER STATISTICS
  // ============================================
  stats: {
    totalContent: {
      type: Number,
      default: 0          // Total content items saved by user
    },
    totalSummaries: {
      type: Number,
      default: 0          // Total summaries generated by user
    }
  }
}, {
  // ============================================
  // SCHEMA OPTIONS
  // ============================================
  timestamps: true,           // Automatically add createdAt and updatedAt fields
  toJSON: { virtuals: true }, // Include virtual fields when converting to JSON
  toObject: { virtuals: true } // Include virtual fields when converting to object
});

// ============================================
// VIRTUAL FIELDS - COMPUTED PROPERTIES
// ============================================
// These fields are computed dynamically and not stored in database

// Virtual field for follower count (privacy-conscious - shows count, not details)
userSchema.virtual('followerCount').get(function() {
  return this.followers ? this.followers.length : 0;
});

// Virtual field for following count
userSchema.virtual('followingCount').get(function() {
  return this.following ? this.following.length : 0;
});

// ============================================
// MIDDLEWARE - PRE-SAVE PASSWORD HASHING
// ============================================
// This runs before saving user to database and hashes the password
userSchema.pre('save', async function(next) {
  // Only hash password if it's been modified (new user or password change)
  if (!this.isModified('password')) return next();
  
  try {
    // Generate salt for password hashing (10 rounds is secure and performant)
    const salt = await bcrypt.genSalt(10);
    // Hash the password with the salt
    this.password = await bcrypt.hash(this.password, salt);
    next(); // Continue with save operation
  } catch (error) {
    next(error); // Pass error to error handler
  }
});

// ============================================
// INSTANCE METHODS - USER FUNCTIONALITY
// ============================================

// Method to compare plain text password with hashed password
userSchema.methods.comparePassword = async function(candidatePassword) {
  return bcrypt.compare(candidatePassword, this.password);
};

// Override toJSON to remove sensitive data when sending user object as response
userSchema.methods.toJSON = function() {
  const userObject = this.toObject();
  delete userObject.password;  // Remove password from JSON output for security
  return userObject;
};

// ============================================
// SOCIAL FEATURE HELPER METHODS
// ============================================

// Check if this user is following another user (by user ID)
userSchema.methods.isFollowing = function(userId) {
  if (!this.following) return false;
  
  return this.following.some(follow => {
    // Handle both populated and non-populated user references
    const followUserId = follow.user._id || follow.user;
    return followUserId.toString() === userId.toString();
  });
};

// Check if this user has a pending follow request from another user
userSchema.methods.hasPendingRequest = function(userId) {
  if (!this.followRequests) return false;
  
  return this.followRequests.some(request => {
    // Handle both populated and non-populated user references
    const requestFromId = request.from._id || request.from;
    return requestFromId.toString() === userId.toString();
  });
};

// ============================================
// EXPORT THE USER MODEL
// ============================================
// Create and export the User model for use in other parts of the application
module.exports = mongoose.model('User', userSchema);
